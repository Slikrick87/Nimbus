@page "/"
@using Nimbus.Shared.Services;
@using Nimbus.Shared.Entities;
@using Nimbus.Shared.Repositories;
@inject ITruckRepository TruckRepository;
@inject IRouteRepository RouteRepository;
@inject TempService TempService;
@inject IFormFactor FormFactor

<PageTitle>Home</PageTitle>
@if (truck != null && route != null)
{
    <h1>Selected Truck: @truck.id</h1>
<h1>Selected Route: @route.Id, @route.nickName</h1>
}
else
{
    <h1>Please Select Truck and Route</h1>
}

<div class="nav-item px-3">
    <NavLink class="nav-link" href="selectTruck">
        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Select Truck
    </NavLink>
</div>

<div class="nav-item px-3">
    <NavLink class="nav-link" href="selectRoute">
        <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Select Route
    </NavLink>
</div>
@code {

    //Can move @code to a partial class with same name such as Home.cs
    //look up blazor validation form
    //<tbody>simple html table</tbody>
    //can use @page "/DisplayTruck/{TruckId}" to set the route and use another to same page without {TruckId}
    //@bind-Value="@truckid" to bind the value to the property will chhange dynamically even in loops and if statements
    //Input select for dropdowns InputCheckBox for checkboxes
    //check<EditForm Model="truck" OnValidSubmit="HandleValidSubmit">
    //add modal for creating and adding addresses to routes
    //lock buttons after onclick when using ASYNC so you don't have multiple calls
    //finish tests 
    //Check Datacontext and update relationships
    //IAsyncEnumerable for large data sets
    //CancellationTokenSource
    //change header footer and layout in layout.cshtml
    //make new layout page for mao display
    //[Required(ErrorMessage = "Please enter a name.")])]
    //Add for calling error list display on creation pages and where according


    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    public List<RouteEntity> routes;
    public RouteEntity route;
    public TruckEntity truck;
    public int routeid;
    private string routeSelection;
    // private async Task SaveValue()
    // {
    //     await SecureStorage.Default.SetItemAsync("routeSelection", routeSelection);
    // }
    // public void SelectRoute()
    // {
    //     route = RouteRepository.GetRouteById(routeid);
    // }
    public void OnCheckboxChange(ChangeEventArgs e, RouteEntity route)
    {
        if ((bool)e.Value)
        {
            TempService.selectedRoute = route;
        }
        else
        {
            TempService.selectedRoute = null;
        }
    }
    protected override void OnInitialized()
    {
        try
        {
            truck = TempService.currentTruck;
            route = TempService.selectedRoute;
        }
        catch
        {
        }
    }

    // HttpContext.Session.SetString("truckid", truckid.ToString());
    // Response.Redirect("/selectRoute");
}
